
Link to PS: https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/7c99c5ed-967e-43f7-aa55-7cbca139b289/38c3e054-9e72-4047-8789-b873c833c56a

download and install .net 8.osdk

1. Setting up the completed project
   clone this repo https://github.com/rolandguijt/ps-globomantics-webapi-react

    - click clone repository  (completed project)
    - this React Project is using Vite 

    - after cloning do: 
        dotnet tool install --global dotnet-ef
        cd api project
        dotnet ef database update 
        run the api 
        - dotnet run 

        cd to ReactWeb project 
        - npm install 

     - run the project: npm run dev 

2. Building the React app from scratch

    - see https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/7c99c5ed-967e-43f7-aa55-7cbca139b289/9f92a0f1-17b4-469f-95d8-624f5adb9542
    
    - create react app from scratch 
        npm create vite@5
        when prompted enter ReactWeb as project name 

    - npm install    
    - npm install bootstrap@5

    - import "bootstrap/dist/css/bootstrap.min.css"  in main.tsx

    - add css code to src/main/app.css

    - then create "main" folder and move App.tsx and App.css to this folder
      and then create Header.tsx and import logo iamge and create a 
      function component

    - next modify the App.tsx. Copy code from ReactWeb in the completed project

    - modify the port Vite is running from:
        vite.config --> plugins and the following code:
          server:{
           port: 3000,
           strictPort: true,
          }   

3. Creating the initial API Application: 
     https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/7c99c5ed-967e-43f7-aa55-7cbca139b289/f9528f23-035f-4d5e-96c2-ccf6b66e3fcd
  
     - create directory called API in the root of the project

     - cd API 

     - dotnet new webapi -minimal

     - this API doesn't use controller. basically the whole API is 
       written in program.cs

     - modify launchsettings.json to have the below code (see tutorial)
         "Api": {
          "commandName": "Project",
          "dotnetRunMessages": true,
          "launchBrowser": true,
          "launchUrl": "swagger",
          "applicationUrl": "https://localhost:4000",
          "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
          }
        },
     - run the API using this command: dotnet run
       add swagger to https://localhost:4000/swagger

4. Running and Debugging: 
    - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/7c99c5ed-967e-43f7-aa55-7cbca139b289/ac2cbc02-448b-4bdb-9f6c-658f30cbf042

Module 3: Getting and Displaying Data 
  1. API: Creating Database
      https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/6feac58d-c6dc-40ae-afd9-6358f0bf8bc1/b27964d1-1cdb-40c2-a518-1421030ca4c8
    
      -  dotnet add package Microsoft.EntityFrameworkCore.Sqlite (Sqlite works on many platform)

      - create folder in api/data --> 
          create file HouseEntity.cs and paste code.
          create HouseDbContext : DbContext
          create a class called SeedData.cs (dont copy Bid entity yet)

      - next create the initial migration like this:
          - first install run:
              dotnet add package Microsoft.EntityFrameworkCore.Design

          - once install is finished create the Initial Migration
              cd ../api folder and run "dotnet ef migrations add initial"

              you should see: Build started... etc
          - after successful migration, .netcore will create a folder called "api/Migration"

      - to actually execute the instructions in ./migrations/20241026155228_initial
        and create the database we need to run the following command:
             dotnet ef database update

  2. API: Adding Endpoints
     - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/6feac58d-c6dc-40ae-afd9-6358f0bf8bc1/923360fc-0172-4fda-9038-459c1f4e7db4

     - go to program.cs and add endpoints (see comments)
        - add the database context to the dependency injection ontainer

        - now we can proceed changing the endpoints in program.cs

        - when you run the API now, it will error out complaining that 
          the HouseDbContext needs a constructor. Let's add a constructor

        - do a dotnet run --> go to localhost:4000/houses 
          (affix houses to the URL). You should get a list of houses

  3. Separation of Concerns:
       - create a folder called Dtos

       - create HouseDto  under api/Dtos folder 

       - create HouseRepository.cs folder api/data 

       - then register HouseRepository in DI container in Program.cs then change the App.MapGet to:
          app.MapGet("/houses", (IHouseRepository repo) => repo.GetAll()); 

      -   do a dotnet run --> go to localhost:4000/houses 
          (affix houses to the URL). You should get a list of houses

  4. React Consuming Endpoints
      - the next task is for ReactWeb to display list of houses coming from the API

      - first we need a place to store DTO's needed by react. 
           create a folder src/types and a DTO called house.ts

      - next we need a file where to store the url of the API in react. Create 
        a file called config.ts under src/config.ts

      - create a folder src/house and file houseList.tsx. Put the code for the view here

      - the final thing to do is to render the HouseList component in app.tsx

      - before running the react go to api/program.cs and add  a call to AddCors on the 
        service object and then plug a middleware that allow everything from localhost 
             builder.Services.AddCors();
             app.UseCors(p => p.WithOrigins("http://localhost:3000")
               .AllowAnyHeader().AllowAnyMethod().AllowCredentials());
      - start API: dotnet run 
      - start ReactWeb: npm run dev

  5. React Custom Hooks and Rerender 
      - prevent re-render on fetch
      - create a folder hooks and a file called HouseHooks and define a custom hook:
            const useFetchHouses = (): House[] => {
            const [houses, setHouses] = useState<House[]>
              ([]);

            const fetchHouses = async () => {
                const rsp = await fetch(`${config.baseApiUrl}/houses`);
                const houses = await rsp.json();  //deserialize to JSON
                setHouses(houses); //set the state after which the component will be re-rendered
          };
          fetchHouses();
          return houses;
          }
        
       - then go to HouseList and refactor to call useFetchHouses custom hook